# Real Estate Video Processing Backend - Development Commands
# Usage: just <recipe>

# Default recipe - show available commands
default:
    @just --list

# === Development ===

# Install dependencies
install:
    uv sync

# Install with all optional dependencies (dev tools)
install-dev:
    uv sync --all-extras

# Run the development server
dev:
    uv run python run.py

# Run with uvicorn directly
serve:
    uv run uvicorn main:app --host 0.0.0.0 --port 8000 --reload

# === Code Quality ===

# Format code with ruff
fmt:
    uv run ruff format .

# Check code quality
lint:
    uv run ruff check .

# Fix auto-fixable linting issues
fix:
    uv run ruff check . --fix

# Type checking with mypy
typecheck:
    uv run mypy .

# Run all quality checks
check: lint typecheck
    @echo "‚úÖ All quality checks passed!"

# === Testing ===

# Run tests
test:
    uv run pytest tests/

# Run tests with coverage
test-cov:
    uv run pytest --cov=. tests/

# Test S3 connectivity and configuration
test-s3:
    uv run python test_s3.py

# Create S3 buckets if they don't exist
s3-setup:
    uv run python -c "import asyncio; from services.s3_service import s3_service; asyncio.run(s3_service.setup_buckets())"

# Test S3 upload functionality
test-upload:
    uv run python test_upload.py

# Test S3 download functionality
test-download:
    uv run python test_download.py

# Test S3 validation and error handling
test-s3-validation:
    uv run python test_s3_validation.py

# Run all S3 tests
test-s3-all: test-s3 test-upload test-download test-s3-validation
    @echo "üéâ All S3 tests completed!"

# === Database Management ===

# Start PostgreSQL in Podman (for local development)
db-start:
    podman run --name real-estate-postgres \
        -e POSTGRES_DB=real_estate_pipeline \
        -e POSTGRES_USER=postgres \
        -e POSTGRES_PASSWORD=postgres \
        -p 5432:5432 \
        -d postgres:15

# Stop PostgreSQL container
db-stop:
    podman stop real-estate-postgres

# Remove PostgreSQL container
db-remove:
    podman rm real-estate-postgres

# Connect to PostgreSQL database
db-connect:
    podman exec -it real-estate-postgres psql -U postgres -d real_estate_pipeline

# View database logs
db-logs:
    podman logs real-estate-postgres

# Reset database (stop, remove, start fresh)
db-reset: db-stop db-remove db-start
    @echo "üîÑ Database reset complete"

# === Database Migrations ===

# Initialize Alembic migrations
migrate-init:
    uv run alembic init alembic
    @echo "üìù Edit alembic.ini and alembic/env.py to configure your database"

# Create a new migration
migrate-create MESSAGE:
    uv run alembic revision --autogenerate -m "{{MESSAGE}}"

# Apply migrations
migrate-up:
    uv run alembic upgrade head

# Rollback last migration
migrate-down:
    uv run alembic downgrade -1

# Show migration history
migrate-history:
    uv run alembic history

# Show current migration
migrate-current:
    uv run alembic current

# === Environment ===

# Copy environment template
env:
    cp .env.example .env
    @echo "üìù Edit .env with your configuration"

# Check environment configuration
env-check:
    uv run python -c "from utils.config import settings; print('‚úÖ Environment loaded successfully')"

# Show configuration status (without secrets)
config:
    uv run python -c "import json; from utils.config import settings; config = {'database': bool(settings.database_url), 'redis': bool(settings.redis_url), 's3_configured': bool(settings.aws_access_key_id and settings.aws_secret_access_key), 'runpod_configured': bool(settings.runpod_api_key and settings.runpod_endpoint_id), 'debug': settings.debug, 'api_port': settings.api_port}; print(json.dumps(config, indent=2))"

# === Health Checks ===

# Check API health (requires running server)
health:
    curl -s http://localhost:8000/health/ | python -m json.tool

# Check detailed health status
health-detailed:
    curl -s http://localhost:8000/health/detailed | python -m json.tool

# === Podman ===

# Build Podman image
podman-build:
    podman build -t real-estate-backend .

# Run in Podman container
podman-run:
    podman run --rm -p 8000:8000 --env-file .env real-estate-backend

# === Cleanup ===

# Clean Python cache files
clean:
    find . -type f -name "*.pyc" -delete
    find . -type d -name "__pycache__" -delete
    find . -type d -name "*.egg-info" -exec rm -rf {} +

# Clean everything (cache + dependencies)
clean-all: clean
    rm -rf .venv/
    rm -f uv.lock

# === Quick Start ===

# Complete setup for new developers
setup: install-dev env
    @echo "üöÄ Setup complete! Edit .env and run 'just dev'"

# Full development environment with database
dev-full: setup db-start
    @echo "üíæ Database started at localhost:5432"
    @echo "üöÄ Run 'just dev' to start the API server"

# === RunPod Management ===

# Create RunPod serverless endpoint
runpod-create-endpoint:
    #!/bin/bash
    if [ -z "$RUNPOD_API_KEY" ]; then
        echo "‚ùå RUNPOD_API_KEY environment variable not set"
        echo "Please set it in .env or export RUNPOD_API_KEY=your_key"
        exit 1
    fi
    
    echo "üöÄ Creating RunPod endpoint..."
    curl -X POST "https://rest.runpod.io/v1/endpoints" \
        -H "Authorization: Bearer $RUNPOD_API_KEY" \
        -H "Content-Type: application/json" \
        -d '{
            "name": "real-estate-video-processor",
            "imageName": "pytorch/pytorch:2.1.0-cuda12.1-cudnn8-devel",
            "dockerArgs": "",
            "containerDiskInGb": 25,
            "volumeInGb": 0,
            "volumeMountPath": "/runpod-volume",
            "ports": "8000/http",
            "env": {
                "PYTHON_VERSION": "3.11",
                "AWS_REGION": "us-east-1"
            },
            "gpuTypeIds": ["NVIDIA GeForce RTX 4090"],
            "gpuCount": 1,
            "workersMin": 0,
            "workersMax": 1,
            "scalerType": "QUEUE_DELAY",
            "scalerValue": 4,
            "idleTimeout": 5,
            "executionTimeoutMs": 900000
        }'

# List RunPod endpoints
runpod-list-endpoints:
    #!/bin/bash
    if [ -z "$RUNPOD_API_KEY" ]; then
        echo "‚ùå RUNPOD_API_KEY environment variable not set"
        exit 1
    fi
    
    echo "üìã Listing RunPod endpoints..."
    curl -X GET "https://rest.runpod.io/v1/endpoints" \
        -H "Authorization: Bearer $RUNPOD_API_KEY" \
        -H "Content-Type: application/json"

# Get RunPod endpoint details
runpod-status ENDPOINT_ID:
    #!/bin/bash
    if [ -z "$RUNPOD_API_KEY" ]; then
        echo "‚ùå RUNPOD_API_KEY environment variable not set"
        exit 1
    fi
    
    echo "üîç Getting endpoint details for {{ENDPOINT_ID}}..."
    curl -X GET "https://rest.runpod.io/v1/endpoints/{{ENDPOINT_ID}}" \
        -H "Authorization: Bearer $RUNPOD_API_KEY" \
        -H "Content-Type: application/json"

# List RunPod templates (to find templateId for endpoint creation)
runpod-list-templates:
    #!/bin/bash
    if [ -z "$RUNPOD_API_KEY" ]; then
        echo "‚ùå RUNPOD_API_KEY environment variable not set"
        exit 1
    fi
    
    echo "üìã Listing RunPod templates..."
    curl -X GET "https://rest.runpod.io/v1/templates" \
        -H "Authorization: Bearer $RUNPOD_API_KEY" \
        -H "Content-Type: application/json"

# Update RunPod endpoint
runpod-update-endpoint ENDPOINT_ID:
    #!/bin/bash
    if [ -z "$RUNPOD_API_KEY" ]; then
        echo "‚ùå RUNPOD_API_KEY environment variable not set"
        exit 1
    fi
    
    echo "üîÑ Updating endpoint {{ENDPOINT_ID}}..."
    curl -X PUT "https://rest.runpod.io/v1/endpoints/{{ENDPOINT_ID}}" \
        -H "Authorization: Bearer $RUNPOD_API_KEY" \
        -H "Content-Type: application/json" \
        -d '{
            "workersMin": 0,
            "workersMax": 5,
            "scalerType": "QUEUE_DELAY",
            "scalerValue": 4,
            "idleTimeout": 5
        }'

# Delete RunPod endpoint
runpod-delete-endpoint ENDPOINT_ID:
    #!/bin/bash
    if [ -z "$RUNPOD_API_KEY" ]; then
        echo "‚ùå RUNPOD_API_KEY environment variable not set"
        exit 1
    fi
    
    echo "üóëÔ∏è  Deleting endpoint {{ENDPOINT_ID}}..."
    read -p "Are you sure you want to delete this endpoint? (y/N): " confirm
    if [[ $confirm =~ ^[Yy]$ ]]; then
        curl -X DELETE "https://rest.runpod.io/v1/endpoints/{{ENDPOINT_ID}}" \
            -H "Authorization: Bearer $RUNPOD_API_KEY" \
            -H "Content-Type: application/json"
    else
        echo "Cancelled."
    fi

# Test RunPod connection
test-runpod:
    uv run python -c "import asyncio; from services.runpod_service import runpod_service; print('RunPod config:', runpod_service.validate_configuration())"

# Interactive RunPod setup
runpod-setup:
    uv run python setup_runpod.py setup

# Create template and endpoint (recommended)
runpod-create-template-and-endpoint:
    uv run python create_runpod_template.py

# Quick RunPod commands using helper script
runpod-templates:
    #!/bin/bash
    if [ -z "$RUNPOD_API_KEY" ]; then
        echo "‚ùå RUNPOD_API_KEY environment variable not set"
        echo "Please set it in .env or export RUNPOD_API_KEY=your_key"
        exit 1
    fi
    
    echo "üìã Listing RunPod templates..."
    curl -s -X GET "https://rest.runpod.io/v1/templates" \
        -H "Authorization: Bearer $RUNPOD_API_KEY" \
        -H "Content-Type: application/json" | \
    uv run python parse_runpod_response.py templates

runpod-endpoints:
    #!/bin/bash
    if [ -z "$RUNPOD_API_KEY" ]; then
        echo "‚ùå RUNPOD_API_KEY environment variable not set"
        echo "Please set it in .env or export RUNPOD_API_KEY=your_key"
        exit 1
    fi
    
    echo "üöÄ Listing RunPod endpoints..."
    curl -s -X GET "https://rest.runpod.io/v1/endpoints" \
        -H "Authorization: Bearer $RUNPOD_API_KEY" \
        -H "Content-Type: application/json" | \
    uv run python parse_runpod_response.py endpoints
